10/29/2015

The search function is undergoing implementation.  Essentially what occurs is that the user inputs a file extention (i.e. '.sql')
which will then be searched by the post CBC decryption as to whether the file exists or not.  If there exists a file type of 
which the user requests, it will be written out.  The main benefit of this function is that it does not require the user to
save every file that gets decrypted.

The process behind the search function is as follows.  Files are found based off the character '.'.  For example,
'.\Andrew\File1\File2\text.doc' would result in the text.doc folder to be found if I were to be searching for the .doc
extention.  Once the file is found, the contents of the file would be written within their respective folders.

10/08/2015

Fixed minor syntax errors involved with the CBC encryption/decryption.

Changed the cipher key to be read off a binary file as opposed to a text file.

Changed project name to practicalAES.

Updated Readme with descriptions and images of how to use practicalaes.

10/06/2015
EBC and CBC options are fully implemented.  CBC mode is automaticaly enabled by adding an additional char* argument to the end.
Added several functions to make CBC encryption/decryption to essentially be a variation of EBC.  This primarily includes
function involved the variable xorvector, which is exclusively used for the CBC modes.  I am attempting to find a workaround
to help make the code cleaner by only enabling various functions and varibles through the usage of header guards.

The initialization vector is accepted via a byte file of size 16 bytes.  For parity reasons, the cipher, which has originally
been accepted as text format, may be moved to be stored as a byte file.  The primary issue with this is that it complicates
the task for users who may not be as familiar with how AES operates, which was originally the target audience for this program.

Main function has had a significant amount of clutter removed to make the code easier to understand.

10/03/2015
Architecture changed to conviniently manage both EBC and CBC modes, where the executable initially searches for what process
the user chooses, then selects either EBC or the CBC mode.  The EBC mode is generally the default mode, and adding an
additional argument to the end of type (char *IVFile), where IVFile contains the location of the intiialization vector key
in binary allows the executable to perform encryption and decryption in CBC mode.

Smaller block codes were removed from the main() function and were replaced with functions to give the code an overall cleaner
appearance and to help the reader/use gain a better understand of what is occuring within the code.

The way the output file is generated has been changed.  By default, it creates a file called output and writes either the
decrypted or encrypted binary result within the file.  The new method involves checking whether a current output file exists.
If so, then a new file followed by an integer is created.  For example, if output exists, then output (1) would be created
next.  This method seemed preferable to deleting the contents of the original output file and rewriting to the file and was 
therefore implemented.

9/25/2015

Binary File I/O:
-Padding correctly functions now if a state consisting of 16 bytes receives an input of 15 bytes or less.  The hex value 0x00
is padded onto the end for such scenarions.

Inverse Rijndael's Algorithm/Decryption:
-Finally figured out an efficient way of solving inverse mix columns.  This arguably took the longest period of time as the
method for approaching this is not very intuitive and requires using the field representation 0x1B whenever the highest bit
(leftmost bit in a byte) is a 1.

-Implemented inverse algorithms for the remainder of the steps as well.  A decryption is essentially an encryption performed
backwards, and therefore many of the operations (e.x. S-Box substitutions or Shift Rows) are fairly straightforward
when performed inversely.

General Syntax
-The option to decrypt binary files now is avaliable.  This is done in a similar format as the encrypt function via command
line. An example would be the following:
Encryption: name.exe e cipher.txt binary.bin
Decryption: name.exe d cipher.txt binary.bin

Both are still registered to write into the file output.bin, although this is avaliable for alternations within the code.

-Output.bin is now cleared of its contents before it is written into (case where output.bin already has bytes written within)

-The executable now reads the number of inputs first prior as opposed to whether it performs an encryption/decryption/scan
and therefore operates more efficiently since it eliminates operation types by number type which is a check that can be done
in constant time.  Afterwards, it takes the remainder of the operations and scans from there, making it the executable
slightly more efficient.

-A function PrintState has been added, which can be used by those who want to edit the source code to easily check the current
state values during operation.

9/9/2015

Binary File I/O:
- For reliability purposes, the file directories are now absolutes.  This means that the user should configure the 'basedirectory'
variable to the folder where the source code, cipher text file, and binary file to be encrypted/decrypted are located.  This 
change may be altered in the future if a better method can be found.

- The code can now accurately read and write to files without any issues.  The cipher key is to be written in a text format, 
while the binary file is to be sourced from hex/binary.  The output result is by default written to a file called 'output', 
although this may be changed by the user.  Similarly, the output file is to be written in binary format.

- The cipher key reads the first 32 characters in the cipher text and renders it as 16 hex characters.  

- Fixed general issues of the code not correctly writing to the output file (essentially fixed by using a reference to the 
state variable).

Rijndael's Algorithm:

- Fixed consistency issues regarding the indexing of arrays. (i.e. counting starting going down the array or going right)

- Fixed several issues regarding how the round key expansion works. (first round being a copy of cipher key, correction for
every 4th round, xor's for the correct columns)

- There was a minor oversight with how AddRoundKey worked, which did not correctly compute the current round to be added.

General Syntax:

- State is no longer a pointer array due to issues being able to assign the array elements of state hex characters.  (I'm 
sure there is a workaround solution to this, so it max be fixed in the future)

- The encrypt option now works correctly.  Decrypting binary files is likely to be similar, so it will likely be implemented
soon.

8/25/2015

Corrected code issues related to Rijndael's algorithm within the program.  Most errors seem to be synxtax issues or type 
casting related which have been fixed.  The next step is to ensure that the program is capable of readng and writing from and to 
binary files correctly.
